{"key": "AY-zwek_WByPg3BEAi9T", "component": {"key": "versions:实验三可达性分析/实验三可达性分析/选择和black版本一样的运行结果.py", "qualifier": "FIL", "name": "选择和black版本一样的运行结果.py", "longName": "实验三可达性分析/实验三可达性分析/选择和black版本一样的运行结果.py", "path": "实验三可达性分析/实验三可达性分析/选择和black版本一样的运行结果.py"}, "project": {"key": "versions", "qualifier": "TRK", "name": "versions", "longName": "versions"}, "rule": {"key": "python:S5852", "name": "Using slow regular expressions is security-sensitive", "securityCategory": "dos", "vulnerabilityProbability": "MEDIUM", "riskDescription": "<p>Most of the regular expression engines use <code>backtracking</code> to try all possible execution paths of the regular expression when evaluating\nan input, in some cases it can cause performance issues, called <code>catastrophic backtracking</code> situations. In the worst case, the complexity\nof the regular expression is exponential in the size of the input, this means that a small carefully-crafted input (like 20 chars) can trigger\n<code>catastrophic backtracking</code> and cause a denial of service of the application. Super-linear regex complexity can lead to the same impact too\nwith, in this case, a large carefully-crafted input (thousands chars).</p>\n<p>This rule determines the runtime complexity of a regular expression and informs you of the complexity if it is not linear.</p>\n", "vulnerabilityDescription": "<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The input is user-controlled. </li>\n  <li> The input size is not restricted to a small number of characters. </li>\n  <li> There is no timeout in place to limit the regex evaluation time. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n", "fixRecommendations": "<h2>Recommended Secure Coding Practices</h2>\n<p>To avoid <code>catastrophic backtracking</code> situations, make sure that none of the following conditions apply to your regular expression.</p>\n<p>In all of the following cases, catastrophic backtracking can only happen if the problematic part of the regex is followed by a pattern that can\nfail, causing the backtracking to actually happen. Note that when performing a full match (e.g. using <code>re.fullmatch</code>), the end of the regex\ncounts as a pattern that can fail because it will only succeed when the end of the string is reached.</p>\n<ul>\n  <li> If you have a non-possessive repetition <code>r*</code> or <code>r*?</code>, such that the regex <code>r</code> could produce different\n  possible matches (of possibly different lengths) on the same input, the worst case matching time can be exponential. This can be the case if\n  <code>r</code> contains optional parts, alternations or additional repetitions (but not if the repetition is written in such a way that there’s only\n  one way to match it). </li>\n  <li> If you have multiple non-possessive repetitions that can match the same contents and are consecutive or are only separated by an optional\n  separator or a separator that can be matched by both of the repetitions, the worst case matching time can be polynomial (O(n^c) where c is the\n  number of problematic repetitions). For example <code>a*b*</code> is not a problem because <code>a*</code> and <code>b*</code> match different\n  things and <code>a*_a*</code> is not a problem because the repetitions are separated by a <code>'_'</code> and can’t match that <code>'_'</code>.\n  However, <code>a*a*</code> and <code>.*_.*</code> have quadratic runtime. </li>\n  <li> If you’re performing a partial match (such as by using <code>re.search</code>, <code>re.split</code>, <code>re.findall</code> etc.) and the\n  regex is not anchored to the beginning of the string, quadratic runtime is especially hard to avoid because whenever a match fails, the regex engine\n  will try again starting at the next index. This means that any unbounded repetition (even a possessive one), if it’s followed by a pattern that can\n  fail, can cause quadratic runtime on some inputs. For example <code>re.split(r\"\\s*,\", my_str)</code> will run in quadratic time on strings that\n  consist entirely of spaces (or at least contain large sequences of spaces, not followed by a comma). </li>\n</ul>\n<p>In order to rewrite your regular expression without these patterns, consider the following strategies:</p>\n<ul>\n  <li> If applicable, define a maximum number of expected repetitions using the bounded quantifiers, like <code>{1,5}</code> instead of <code>+</code>\n  for instance. </li>\n  <li> Refactor <code>nested quantifiers</code> to limit the number of way the inner group can be matched by the outer quantifier, for instance this\n  nested quantifier situation <code>(ba+)+</code> doesn’t cause performance issues, indeed, the inner group can be matched only if there exists\n  exactly one <code>b</code> char per repetition of the group. </li>\n  <li> Optimize regular expressions with <code>possessive quantifiers</code> and <code>atomic grouping</code> (available since Python 3.11). </li>\n  <li> Use negated character classes instead of <code>.</code> to exclude separators where applicable. For example the quadratic regex\n  <code>.*_.*</code> can be made linear by changing it to <code>[^_]*_.*</code> </li>\n</ul>\n<p>Sometimes it’s not possible to rewrite the regex to be linear while still matching what you want it to match. Especially when using partial\nmatches, for which it is quite hard to avoid quadratic runtimes. In those cases consider the following approaches:</p>\n<ul>\n  <li> Solve the problem without regular expressions </li>\n  <li> Use an alternative non-backtracking regex implementations such as Google’s <a href=\"https://github.com/google/re2\">RE2</a>. </li>\n  <li> Use multiple passes. This could mean pre- and/or post-processing the string manually before/after applying the regular expression to it or\n  using multiple regular expressions. One example of this would be to replace <code>re.split(\"\\s*,\\s*\", my_str)</code> with <code>re.split(\",\",\n  my_str)</code> and then trimming the spaces from the strings as a second step. </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">OWASP Top 10 2017 Category A1</a> - Injection </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/400\">MITRE, CWE-400</a> - Uncontrolled Resource Consumption </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/1333\">MITRE, CWE-1333</a> - Inefficient Regular Expression Complexity </li>\n  <li> <a href=\"https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\">owasp.org</a> - OWASP Regular expression Denial\n  of Service - ReDoS </li>\n  <li> <a\n  href=\"https://web.archive.org/web/20220506215733/https://stackstatus.net/post/147710624694/outage-postmortem-july-20-2016\">stackstatus.net(archived)</a> - Outage Postmortem - July 20, 2016 </li>\n  <li> <a href=\"https://www.regular-expressions.info/catastrophic.html\">regular-expressions.info</a> - Runaway Regular Expressions: Catastrophic\n  Backtracking </li>\n  <li> <a\n  href=\"https://docs.microsoft.com/en-us/dotnet/standard/base-types/backtracking-in-regular-expressions#backtracking-with-nested-optional-quantifiers\">docs.microsoft.com</a> - Backtracking with Nested Optional Quantifiers </li>\n</ul>"}, "status": "TO_REVIEW", "line": 77, "hash": "206a99d1c9c506fbae1eff89f396df12", "message": "Make sure the regex used here, which is vulnerable to polynomial runtime due to backtracking, cannot lead to denial of service.", "creationDate": "2024-05-26T15:15:47+0800", "updateDate": "2024-05-26T15:15:47+0800", "textRange": {"startLine": 77, "endLine": 77, "startOffset": 29, "endOffset": 66}, "changelog": [], "comment": [], "users": [], "canChangeStatus": true, "flows": [], "messageFormattings": [], "codeVariants": []}