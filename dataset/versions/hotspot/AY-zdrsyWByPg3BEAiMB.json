{"key": "AY-zdrsyWByPg3BEAiMB", "component": {"key": "versions:实验一漏洞版本/处理Jenkins的pom.py", "qualifier": "FIL", "name": "处理Jenkins的pom.py", "longName": "实验一漏洞版本/处理Jenkins的pom.py", "path": "实验一漏洞版本/处理Jenkins的pom.py"}, "project": {"key": "versions", "qualifier": "TRK", "name": "versions", "longName": "versions"}, "rule": {"key": "python:S5332", "name": "Using clear-text protocols is security-sensitive", "securityCategory": "encrypt-data", "vulnerabilityProbability": "LOW", "riskDescription": "<p>Clear-text protocols such as <code>ftp</code>, <code>telnet</code>, or <code>http</code> lack encryption of transported data, as well as the\ncapability to build an authenticated connection. It means that an attacker able to sniff traffic from the network can read, modify, or corrupt the\ntransported content. These protocols are not secure as they expose applications to an extensive range of risks:</p>\n<ul>\n  <li> sensitive data exposure </li>\n  <li> traffic redirected to a malicious endpoint </li>\n  <li> malware-infected software update or installer </li>\n  <li> execution of client-side code </li>\n  <li> corruption of critical information </li>\n</ul>\n<p>Even in the context of isolated networks like offline environments or segmented cloud environments, the insider threat exists. Thus, attacks\ninvolving communications being sniffed or tampered with can still happen.</p>\n<p>For example, attackers could successfully compromise prior security layers by:</p>\n<ul>\n  <li> bypassing isolation mechanisms </li>\n  <li> compromising a component of the network </li>\n  <li> getting the credentials of an internal IAM account (either from a service account or an actual person) </li>\n</ul>\n<p>In such cases, encrypting communications would decrease the chances of attackers to successfully leak data or steal credentials from other network\ncomponents. By layering various security practices (segmentation and encryption, for example), the application will follow the\n<em>defense-in-depth</em> principle.</p>\n<p>Note that using the <code>http</code> protocol is being deprecated by <a\nhref=\"https://blog.mozilla.org/security/2015/04/30/deprecating-non-secure-http\">major web browsers</a>.</p>\n<p>In the past, it has led to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-6169\">CVE-2019-6169</a> </li>\n  <li> <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-12327\">CVE-2019-12327</a> </li>\n  <li> <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-11065\">CVE-2019-11065</a> </li>\n</ul>\n<h2>Exceptions</h2>\n<p>No issue is reported for the following cases because they are not considered sensitive:</p>\n<ul>\n  <li> Insecure protocol scheme followed by loopback addresses like 127.0.0.1 or <code>localhost</code>. </li>\n</ul>\n", "vulnerabilityDescription": "<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Application data needs to be protected against falsifications or leaks when transiting over the network. </li>\n  <li> Application data transits over an untrusted network. </li>\n  <li> Compliance rules require the service to encrypt data in transit. </li>\n  <li> Your application renders web pages with a relaxed mixed content policy. </li>\n  <li> OS-level protections against clear-text traffic are deactivated. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nurl = \"http://example.com\" # Sensitive\nurl = \"ftp://anonymous@example.com\" # Sensitive\nurl = \"telnet://anonymous@example.com\" # Sensitive\n\nimport telnetlib\ncnx = telnetlib.Telnet(\"towel.blinkenlights.nl\") # Sensitive\n\nimport ftplib\ncnx = ftplib.FTP(\"ftp.example.com\") # Sensitive\n\nimport smtplib\nsmtp = smtplib.SMTP(\"smtp.example.com\", port=587) # Sensitive\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancingv2/ApplicationLoadBalancer.html\">aws_cdk.aws_elasticloadbalancingv2.ApplicationLoadBalancer</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancingv2 as elbv2,\n)\n\nlb = elbv2.ApplicationLoadBalancer(\n    self,\n    \"LB\",\n    vpc=vpc,\n    internet_facing=True\n)\n\nlb.add_listener(\n    \"Listener-default\",\n    port=80, # Sensitive\n    open=True\n)\nlb.add_listener(\n    \"Listener-http-explicit\",\n    protocol=elbv2.ApplicationProtocol.HTTP, # Sensitive\n    port=8080,\n    open=True\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancingv2/ApplicationListener.html\">aws_cdk.aws_elasticloadbalancingv2.ApplicationListener</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancingv2 as elbv2,\n)\n\nelbv2.ApplicationListener(\n    self,\n    \"listener-http-explicit-const\",\n    load_balancer=lb,\n    protocol=elbv2.ApplicationProtocol.HTTP, # Sensitive\n    port=8081,\n    open=True\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancingv2/NetworkLoadBalancer.html\">aws_cdk.aws_elasticloadbalancingv2.NetworkLoadBalancer</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancingv2 as elbv2,\n)\nlb = elbv2.NetworkLoadBalancer(\n    self,\n    \"LB\",\n    vpc=vpc,\n    internet_facing=True\n)\n\nlb.add_listener( # Sensitive\n    \"Listener-default\",\n    port=1234\n)\nlb.add_listener(\n    \"Listener-TCP-explicit\",\n    protocol=elbv2.Protocol.TCP, # Sensitive\n    port=1337\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancingv2/NetworkListener.html\">aws_cdk.aws_elasticloadbalancingv2.NetworkListener</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancingv2 as elbv2,\n)\n\nelbv2.NetworkListener(\n    self,\n    \"Listener-TCP-explicit\",\n    protocol=elbv2.Protocol.TCP, # Sensitive\n    port=1338,\n    load_balancer=lb\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancingv2/CfnListener.html\">aws_cdk.aws_elasticloadbalancingv2.CfnListener</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancingv2 as elbv2,\n)\n\nelbv2.CfnListener(\n    self,\n    \"listener-http\",\n    default_actions=[application_default_action],\n    load_balancer_arn=lb.load_balancer_arn,\n    protocol=\"HTTP\", # Sensitive\n    port=80\n)\n\nelbv2.CfnListener(\n    self,\n    \"listener-tcp\",\n    default_actions=[network_default_action],\n    load_balancer_arn=lb.load_balancer_arn,\n    protocol=\"TCP\", # Sensitive\n    port=1000\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancing/LoadBalancerListener.html\">aws_cdk.aws_elasticloadbalancing.LoadBalancerListener</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancing as elb,\n)\n\nelb.LoadBalancerListener(\n    external_port=10000,\n    external_protocol=elb.LoadBalancingProtocol.TCP, # Sensitive\n    internal_port=10000\n)\n\nelb.LoadBalancerListener(\n    external_port=10080,\n    external_protocol=elb.LoadBalancingProtocol.HTTP, # Sensitive\n    internal_port=10080\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancing/CfnLoadBalancer.html\">aws_cdk.aws_elasticloadbalancing.CfnLoadBalancer</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancing as elb\n)\n\nelb.CfnLoadBalancer(\n    self,\n    \"elb-tcp\",\n    listeners=[\n        elb.CfnLoadBalancer.ListenersProperty(\n            instance_port=\"10000\",\n            load_balancer_port=\"10000\",\n            protocol=\"tcp\" # Sensitive\n        )\n    ],\n    subnets=vpc.select_subnets().subnet_ids\n)\n\nelb.CfnLoadBalancer(\n    self,\n    \"elb-http-dict\",\n    listeners=[\n        {\n            \"instancePort\":\"10000\",\n            \"loadBalancerPort\":\"10000\",\n            \"protocol\":\"http\" # Sensitive\n        }\n    ],\n    subnets=vpc.select_subnets().subnet_ids\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancing/LoadBalancer.html\">aws_cdk.aws_elasticloadbalancing.LoadBalancer</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancing as elb,\n)\n\nelb.LoadBalancer(\n    self,\n    \"elb-tcp-dict\",\n    vpc=vpc,\n    listeners=[\n        {\n            \"externalPort\":10000,\n            \"externalProtocol\":elb.LoadBalancingProtocol.TCP, # Sensitive\n            \"internalPort\":10000\n        }\n    ]\n)\n\nloadBalancer.add_listener(\n    external_port=10081,\n    external_protocol=elb.LoadBalancingProtocol.HTTP, # Sensitive\n    internal_port=10081\n)\nloadBalancer.add_listener(\n    external_port=10001,\n    external_protocol=elb.LoadBalancingProtocol.TCP, # Sensitive\n    internal_port=10001\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticache/CfnReplicationGroup.html\">aws_cdk.aws_elasticache.CfnReplicationGroup</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticache as elasticache\n)\n\nelasticache.CfnReplicationGroup(\n    self,\n    \"unencrypted-explicit\",\n    replication_group_description=\"a replication group\",\n    automatic_failover_enabled=False,\n    transit_encryption_enabled=False, # Sensitive\n    cache_subnet_group_name=\"test\",\n    engine=\"redis\",\n    engine_version=\"3.2.6\",\n    num_cache_clusters=1,\n    cache_node_type=\"cache.t2.micro\"\n)\n\nelasticache.CfnReplicationGroup( # Sensitive, encryption is disabled by default\n    self,\n    \"unencrypted-implicit\",\n    replication_group_description=\"a test replication group\",\n    automatic_failover_enabled=False,\n    cache_subnet_group_name=\"test\",\n    engine=\"redis\",\n    engine_version=\"3.2.6\",\n    num_cache_clusters=1,\n    cache_node_type=\"cache.t2.micro\"\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_kinesis/CfnStream.html\">aws_cdk.aws_kinesis.CfnStream</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_kinesis as kinesis,\n)\n\nkinesis.CfnStream( # Sensitive, encryption is disabled by default for CfnStreams\n    self,\n    \"cfnstream-implicit-unencrytped\",\n    shard_count=1\n)\n\nkinesis.CfnStream(self,\n    \"cfnstream-explicit-unencrytped\",\n    shard_count=1,\n    stream_encryption=None # Sensitive\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_kinesis/Stream.html\">aws_cdk.aws_kinesis.Stream</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_kinesis as kinesis,\n)\n\nstream = kinesis.Stream(self,\n    \"stream-explicit-unencrypted\",\n    shard_count=1,\n    encryption=kinesis.StreamEncryption.UNENCRYPTED # Sensitive\n)\n</pre>\n", "fixRecommendations": "<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Make application data transit over a secure, authenticated and encrypted protocol like TLS or SSH. Here are a few alternatives to the most\n  common clear-text protocols:\n    <ul>\n      <li> Use <code>ssh</code> as an alternative to <code>telnet</code>. </li>\n      <li> Use <code>sftp</code>, <code>scp</code>, or <code>ftps</code> instead of <code>ftp</code>. </li>\n      <li> Use <code>https</code> instead of <code>http</code>. </li>\n      <li> Use <code>SMTP</code> over <code>SSL/TLS</code> or <code>SMTP</code> with <code>STARTTLS</code> instead of clear-text SMTP. </li>\n    </ul>  </li>\n  <li> Enable encryption of cloud components communications whenever it is possible. </li>\n  <li> Configure your application to block mixed content when rendering web pages. </li>\n  <li> If available, enforce OS-level deactivation of all clear-text traffic. </li>\n</ul>\n<p>It is recommended to secure all transport channels, even on local networks, as it can take a single non-secure connection to compromise an entire\napplication or system.</p>\n<h2>Compliant Solution</h2>\n<pre>\nurl = \"https://example.com\"\nurl = \"sftp://anonymous@example.com\"\nurl = \"ssh://anonymous@example.com\"\n\nimport ftplib\ncnx = ftplib.FTP_TLS(\"ftp.example.com\")\n\nimport smtplib\nsmtp = smtplib.SMTP(\"smtp.example.com\", port=587)\nsmtp.starttls(context=context)\n\nsmtp_ssl = smtplib.SMTP_SSL(\"smtp.gmail.com\", port=465)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancingv2/ApplicationLoadBalancer.html\">aws_cdk.aws_elasticloadbalancingv2.ApplicationLoadBalancer</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancingv2 as elbv2,\n)\n\nlb = elbv2.ApplicationLoadBalancer(\n    self,\n    \"LB\",\n    vpc=vpc,\n    internet_facing=True\n)\n\nlb.add_listener(\n    \"Listener-https-explicit\",\n    protocol=elbv2.ApplicationProtocol.HTTPS,\n    certificates=[elbv2.ListenerCertificate(\"certificateARN\")],\n    port=443,\n    open=True\n)\n\nlb.add_listener(\n    \"Listener-https-implicit\",\n    certificates=[elbv2.ListenerCertificate(\"certificateARN\")],\n    port=8443,\n    open=True\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancingv2/ApplicationListener.html\">\naws_cdk.aws_elasticloadbalancingv2.ApplicationListener</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancingv2 as elbv2,\n)\n\nelbv2.ApplicationListener(\n    self,\n    \"listener-https-explicit-const\",\n    load_balancer=lb,\n    protocol=elbv2.ApplicationProtocol.HTTPS,\n    certificates=[elbv2.ListenerCertificate(\"certificateARN\")],\n    port=444,\n    open=True\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancingv2/NetworkLoadBalancer.html\">aws_cdk.aws_elasticloadbalancingv2.NetworkLoadBalancer</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancingv2 as elbv2,\n)\nlb = elbv2.NetworkLoadBalancer(\n    self,\n    \"LB\",\n    vpc=vpc,\n    internet_facing=True\n)\n\nlb.add_listener(\n    \"Listener-TLS-explicit\",\n    protocol=elbv2.Protocol.TLS,\n    certificates=[elbv2.ListenerCertificate(\"certificateARN\")],\n    port=443\n)\nlb.add_listener(\n    \"Listener-TLS-implicit\",\n    certificates=[elbv2.ListenerCertificate(\"certificateARN\")],\n    port=1024\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancingv2/NetworkListener.html\">aws_cdk.aws_elasticloadbalancingv2.NetworkListener</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancingv2 as elbv2,\n)\n\nelbv2.NetworkListener(\n    self,\n    \"Listener-TLS-explicit\",\n    protocol=elbv2.Protocol.TLS,\n    certificates=[elbv2.ListenerCertificate(\"certificateARN\")],\n    port=443,\n    load_balancer=lb\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancingv2/CfnListener.html\">aws_cdk.aws_elasticloadbalancingv2.CfnListener</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancingv2 as elbv2,\n)\n\nelbv2.CfnListener(\n    self,\n    \"listener-https\",\n    default_actions=[application_default_action],\n    load_balancer_arn=lb.load_balancer_arn,\n    protocol=\"HTTPS\",\n    port=443,\n    certificates=[elbv2.CfnListener.CertificateProperty(\n        certificate_arn=\"certificateARN\"\n    )]\n)\n\nelbv2.CfnListener(\n    self,\n    \"listener-tls\",\n    default_actions=[network_default_action],\n    load_balancer_arn=lb.load_balancer_arn,\n    protocol=\"TLS\",\n    port=1001,\n    certificates=[elbv2.CfnListener.CertificateProperty(\n        certificate_arn=\"certificateARN\"\n    )]\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancing/LoadBalancerListener.html\">aws_cdk.aws_elasticloadbalancing.LoadBalancerListener</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancing as elb,\n)\n\nelb.LoadBalancerListener(\n    external_port=10043,\n    external_protocol=elb.LoadBalancingProtocol.SSL,\n    internal_port=10043,\n    ssl_certificate_arn=\"certificateARN\"\n)\n\nelb.LoadBalancerListener(\n    external_port=10443,\n    external_protocol=elb.LoadBalancingProtocol.HTTPS,\n    internal_port=10443,\n    ssl_certificate_arn=\"certificateARN\"\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancing/CfnLoadBalancer.html\">aws_cdk.aws_elasticloadbalancing.CfnLoadBalancer</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancing as elb,\n)\n\nelb.CfnLoadBalancer(\n    self,\n    \"elb-ssl\",\n    listeners=[\n        elb.CfnLoadBalancer.ListenersProperty(\n            instance_port=\"10043\",\n            load_balancer_port=\"10043\",\n            protocol=\"ssl\",\n            ssl_certificate_id=CERTIFICATE_ARN\n        )\n    ],\n    subnets=vpc.select_subnets().subnet_ids\n)\n\nelb.CfnLoadBalancer(\n    self,\n    \"elb-https-dict\",\n    listeners=[\n        {\n            \"instancePort\":\"10443\",\n            \"loadBalancerPort\":\"10443\",\n            \"protocol\":\"https\",\n            \"sslCertificateId\":CERTIFICATE_ARN\n        }\n    ],\n    subnets=vpc.select_subnets().subnet_ids\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancing/LoadBalancer.html\">aws_cdk.aws_elasticloadbalancing.LoadBalancer</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancing as elb,\n)\n\nelb.LoadBalancer(\n    self,\n    \"elb-ssl\",\n    vpc=vpc,\n    listeners=[\n        {\n            \"externalPort\":10044,\n            \"externalProtocol\":elb.LoadBalancingProtocol.SSL,\n            \"internalPort\":10044,\n            \"sslCertificateArn\":\"certificateARN\"\n        },\n        {\n            \"externalPort\":10444,\n            \"externalProtocol\":elb.LoadBalancingProtocol.HTTPS,\n            \"internalPort\":10444,\n            \"sslCertificateArn\":\"certificateARN\"\n        }\n    ]\n)\n\nloadBalancer = elb.LoadBalancer(\n        self,\n        \"elb-multi-listener\",\n        vpc=vpc\n)\nloadBalancer.add_listener(\n    external_port=10045,\n    external_protocol=elb.LoadBalancingProtocol.SSL,\n    internal_port=10045,\n    ssl_certificate_arn=\"certificateARN\"\n)\nloadBalancer.add_listener(\n    external_port=10445,\n    external_protocol=elb.LoadBalancingProtocol.HTTPS,\n    internal_port=10445,\n    ssl_certificate_arn=\"certificateARN\"\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticache/CfnReplicationGroup.html\">aws_cdk.aws_elasticache.CfnReplicationGroup</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticache as elasticache\n)\n\nelasticache.CfnReplicationGroup(\n    self,\n    \"encrypted-explicit\",\n    replication_group_description=\"a test replication group\",\n    automatic_failover_enabled=False,\n    transit_encryption_enabled=True,\n    cache_subnet_group_name=\"test\",\n    engine=\"redis\",\n    engine_version=\"3.2.6\",\n    num_cache_clusters=1,\n    cache_node_type=\"cache.t2.micro\"\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_kinesis/CfnStream.html\">aws_cdk.aws_kinesis.CfnStream</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_kinesis as kinesis,\n)\n\nkinesis.CfnStream(\n    self,\n    \"cfnstream-explicit-encrytped\",\n    shard_count=1,\n    stream_encryption=kinesis.CfnStream.StreamEncryptionProperty(\n        encryption_type=\"KMS\",\n        key_id=\"alias/aws/kinesis\"\n    )\n)\n\nstream = kinesis.CfnStream(\n    self,\n    \"cfnstream-explicit-encrytped-dict\",\n    shard_count=1,\n    stream_encryption={\n        \"encryptionType\": \"KMS\",\n        \"keyId\": \"alias/aws/kinesis\"\n    }\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_kinesis/Stream.html\">aws_cdk.aws_kinesis.Stream</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_kinesis as kinesis,\n    aws_kms as kms\n)\n\nstream = kinesis.Stream( # Encryption is enabled by default for Streams\n    self,\n    \"stream-implicit-encrypted\",\n    shard_count=1\n)\n\nstream = kinesis.Stream(\n    self,\n    \"stream-explicit-encrypted-managed\",\n    shard_count=1,\n    encryption=kinesis.StreamEncryption.MANAGED\n)\n\nkey = kms.Key(self, \"managed_key\")\nstream = kinesis.Stream(\n    self,\n    \"stream-explicit-encrypted-selfmanaged\",\n    shard_count=1,\n    encryption=kinesis.StreamEncryption.KMS,\n    encryption_key=key\n)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">OWASP Top 10 2021 Category A2</a> - Cryptographic Failures </li>\n  <li> <a href=\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data\n  Exposure </li>\n  <li> <a href=\"https://mobile-security.gitbook.io/masvs/security-requirements/0x10-v5-network_communication_requirements\">Mobile AppSec Verification\n  Standard</a> - Network Communication Requirements </li>\n  <li> <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m3-insecure-communication\">OWASP Mobile Top 10 2016 Category M3</a> - Insecure\n  Communication </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/200\">MITRE, CWE-200</a> - Exposure of Sensitive Information to an Unauthorized Actor </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/319\">MITRE, CWE-319</a> - Cleartext Transmission of Sensitive Information </li>\n  <li> <a href=\"https://security.googleblog.com/2016/09/moving-towards-more-secure-web.html\">Google, Moving towards more secure web</a> </li>\n  <li> <a href=\"https://blog.mozilla.org/security/2015/04/30/deprecating-non-secure-http/\">Mozilla, Deprecating non secure http</a> </li>\n  <li> <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html\">AWS Documentation</a> - Listeners\n  for your Application Load Balancers </li>\n  <li> <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesis-stream-streamencryption.html\">AWS\n  Documentation</a> - Stream Encryption </li>\n</ul>"}, "status": "TO_REVIEW", "line": 88, "hash": "900e10f2ca49d6270411ad4fdbfb0cb9", "message": "Using http protocol is insecure. Use https instead", "creationDate": "2024-05-26T13:53:50+0800", "updateDate": "2024-05-26T15:15:47+0800", "textRange": {"startLine": 88, "endLine": 88, "startOffset": 30, "endOffset": 65}, "changelog": [], "comment": [], "users": [], "canChangeStatus": true, "flows": [], "messageFormattings": [], "codeVariants": []}